<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAOwAAADsAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwAA
        AGUAAACIAAAAiAAAAIgAAACIAAAAiAAAAIgAAACIAAAAiAAAAIgAAACIAAAAiAAAAIgAAACIAAAAiAAA
        AGUAAAAPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFwAAABaAAAAAQAA
        ABAICAjnEhER/D8+Pf9+fHv/fnx7/358e/9+fHv/fnx7/358e/9+fHv/fnx7/358e/9+fHv/fnx7/358
        e/8/Pj3/EhER/AgICOYAAAAPAAAAAAAAAAAAAAAPAAAAZQAAAIgAAACIAAAAiAAAAIgAAAChEBIk9BAS
        JPQAAABbAAAAZjk2NPZeWVX/dnRz/+3p5v/t6eb/7enm/+3p5v/t6eb/7enm/+3p5v/t6eb/7enm/+3p
        5v/t6eb/7enm/3Z0c/9eWVX/Pzs49QAAAGUAAAAAAAAAEAAAANwAAACkAAAAdwAAAHcAAAB3AAAAdwAA
        AJcQEyT1EBIk9AAAAFsAAACAXllV/15ZVf92dHP/7enm/+zo5f+YlpT/b21r/29ta/9vbWv/b21r/29t
        a/9vbWv/mZeV/+zo5f/t6eb/dnRz/15ZVf9eWVX/AAAAgAAAAAAAAABmAAAAowAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAFUAAABcAAAAAQAAAIBeWVX/XllV/3Z0c//t6eb/l5WT/yInFv9fcjH/X3Ix/19y
        Mf9fcjH/X3Ix/19yMf8iJxb/mJaU/+3p5v92dHP/XllV/15ZVf8AAACAAAAAAAAAAIAAAACAAAAAAAAA
        AAAAAAAAAAAAAAAAACIAAAByAAAAIwAAAAAAAAAAAAAAgF5ZVf9eWVX/dnRz/+3p5v92dHP/WWsu/7PW
        XP+z1lz/g51D/4OdQ/+z1lz/s9Zc/1lrLv92dHP/7enm/3Z0c/9eWVX/XllV/wAAAIAAAAAAAAAAgAAA
        AIAAAAABAAAAWwAAAIgAAACIBAYL5iUsVvoGBwzlAAAAAAAAAAAAAACAXllV/15ZVf92dHP/7enm/3Z0
        c/9Zay7/s9Zc/7PWXP9FUyT/RlQk/7PWXP+z1lz/WWsu/3Z0c//t6eb/dnRz/15ZVf9eWVX/AAAAgAAA
        AAAAAACAAAAAgAAAAFwAAADSAAAAdwAAAHcGBwzmJixX+gYHDOUAAAAAAAAAAAAAAIBeWVX/XllV/3Z0
        c//t6eb/dnRz/1lrLv+z1lz/eJA+/w0kJv8NJCb/cok7/7PWXP9Zay7/dnRz/+3p5v92dHP/XllV/15Z
        Vf8AAACAAAAAAAAAAAAAAAAAAAAAgAAAAIAAAAAAAAAAAAAAACAAAABuAAAAJAAAAAAAAAAAAAAAgF5Z
        Vf9eWVX/dnRz/+3p5v92dHP/WWsu/7PWXP9yiTv/DSQm/w0kJv9zijv/s9Zc/1lrLv92dHP/7enm/3Z0
        c/9eWVX/XllV/wAAAIAAAAAAAAAAgAAAAIAAAACAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAACAXllV/15ZVf92dHP/7enm/3Z0c/9Zay7/s9Zc/7LUW/9yiTv/cok7/7LVXP+z1lz/WWsu/3Z0
        c//t6eb/dnRz/15ZVf9eWVX/AAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAIBeWVX/XllV/3Z0c//t6eb/l5WT/yImFv9UZCv/VGQr/1RkK/9UZCv/VGQr/1Rk
        K/8iJxb/mJaU/+3p5v92dHP/XllV/15ZVf8AAACAAAAAAAAAAIAAAACAAAAAgAAAAIAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAgF5ZVf9eWVX/dnRz/+3p5v/r5+T/l5WT/wAAAP9+fHv/fnx7/358
        e/9+fHv/AAAA/5eVk//s6OX/7enm/3Z0c/9eWVX/XllV/wAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAXllV/15ZVf92dHP/7enm/+3p5v/t6eb/AAAA/+3p
        5v/t6eb/7enm/+3p5v8AAAD/7enm/7KvrP+yr6z/dnRz/15ZVf9eWVX/AAAAgAAAAAAAAACAAAAAgAAA
        AIAAAACAAAAAAAAAAAAAAAA9AAAAiAAAAIgAAACIAAAAPQAAAIBeWVX/XllV/3Z0c//t6eb/7enm/+3p
        5v8GBQX/5+Th/+3p5v/t6eb/5+Th/wYFBf/t6eb/sq+s/7KvrP92dHP/XllV/15ZVf8AAACAAAAAAAAA
        AAAAAAAAAAAAAAAAAA4AAAAAAAAAAQMLDrMORlr/FmqI/w5GWv8DCw60AAAAgl5ZVf9ZVFD/dnRz/+3p
        5v/t6eb/7enm/zY1NP+gnZv/7enm/+3p5v+fnJr/NzY1/+3p5v+yr6z/sq+s/3Z0c/9eWVX/XllV/wAA
        AIAAAAAAAAAAAAAAAAAAAABDAQME9wEJCqsCCw7mBhwk8ySs3f8px///JKzd/wUcJPMAAQH9FhcX/AEC
        Av5wb23/7enm/+3p5v/t6eb/u7i1/xYWFv9cWln/XFpZ/xYWFv+8ubb/7enm/7KvrP+yr6z/dnRz/15Z
        Vf9eWVX/AAAAgAAAAAAAAAAAAAAAQwIJC/Qdi7L/FGB7/iCeyv8krd7/GXqc/xZqiP8Zepz/JK7f/yCd
        yf8UYHv+HYuy/wYNEPmvrKr/7enm/+3p5v/t6eb/1tLP/46Miv+OjIr/1tLP/+3p5v/t6eb/sq+s/7Kv
        rP92dHP/XllV/15ZVf8AAACAAAAAAAAAAA4BAwT3HYuy/ynH//8muOz/DT5Q9gUOEfkjSVb1M2N0/CNJ
        VvUFDhH5DUBS9ia57f8px///HYuy/wUICfzg3Nn/7enm/+3p5v/t6eb/7enm/+3p5v/t6eb/7enm/+3p
        5v+yr6z/sq+s/3Z0c/9eWVX/XllV/wAAAIAAAAAAAAAAAAEJCqsTYHv9Jrjs/wYZH/cxYHL5bM/z/3DX
        /P9w1/z/cNf8/2zP8/8vXnD5Bhog9ya57f8TYHv9GRoa/W9ta/9vbWv/b21r/29ta/9vbWv/b21r/29t
        a/9vbWv/b21r/29ta/9vbWv/NzY1/15ZVf9eWVX/AAAAgAAAAAAAAAABAgwO5SCeyv8OPU71MWBy+XDX
        /P9w1/z/Up24/z54jP9Snbj/cNf8/3DX/P8wX3H5DUBS9iCdyf8CAwP+fXp5/358e/9+fHv/fnx7/358
        e/9+fHv/fnx7/358e/9+fHv/fnx7/358e/8/Pj3/XllV/15ZVf8AAACAAAAAOgMLDrMGHCX0JKzd/wUP
        Evlsz/P/cNf8/yVGU/QHDQ/cAwcJkwcND90lR1P0cNf8/2zP8/8FDhH5JK7f/wgeJfZBRkn2t7Sy/+3p
        5v/t6eb/sq+s/7KvrP+yr6z/sq+s/7KvrP+yr6z/7enm/3Z0c/9eWVX/XllV/wAAAIAAAACADkJV/ySs
        3f8ZeZv/JEtY9XDX/P9Snbj/Bw0P2wAAAAUAAAAAAAAABQcND91Snbj/cNf8/yNJVvUZepz/JKzd/w5C
        Vf92dHP/7enm/+3p5v+yr6z/sq+s/7KvrP+yr6z/sq+s/7KvrP/t6eb/dnRz/15ZVf9eWVX/AAAAgAAA
        AIAUY3//Kcf//xZphv80ZXb8cNf8/z12iv8ECQmRAAAAAAAAAAAAAAAABQkKkz12iv9w1/z/NGR1/BZp
        hv8px///FGN//zc2Nf9vbWv/b21r/29ta/9vbWv/b21r/29ta/9vbWv/b21r/29ta/80MzP7ZF5a/15Z
        Vf8AAACAAAAAgA5CVf8krN3/GXia/yRLWPZw1/z/UZy3/wcND9sAAAAFAAAAAAAAAAUHDQ/cUp24/3DX
        /P8jSlf1GXqc/ySs3f8OQlX/Mi8t/2VfW/9lX1v/ZV9b/2VfW/9lX1v/ZV9b/2VfW/9lX1v/ZV9b/2dh
        Xf+wpZ7/Pjo49QAAAGUAAAA6AwsOswYcJfQjrNz/BQ8S+WzP8/9w1/z/JUZT9AcND9oDBwmSBw0P2yVH
        U/Rw1/z/bM/z/wUOEfkkrd7/CB4m9wAAAP8uKyn/WFNP/1hTT/9YU0//WFNP/1hTT/9YU0//WFNP/1hT
        T/9YU0//WFNP/z87OPUICAjmAAAADwAAAAAAAAABAgwO5SGey/8OPE31MmFy+nDX/P9w1/z/UZy3/z54
        jP9RnLf/cNf8/3DX/P8xYHL5DT9R9iCeyv8CCArsAAAAdwAAAHcAAAB3AAAAdwAAAHcAAAB3AAAAdwAA
        AHcAAAB3AAAAdwAAAHcAAAB3AAAAZgAAAA8AAAAAAAAAAAAAAAABCQqrE2B7/Sa36/8GGR/3MmFy+mzP
        8/9w1/z/cNf8/3DX/P9sz/P/MWBy+QYZIPcmuOz/E2B7/QEJCqwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgEDBPcdi7L/Kcf//ya3
        6/8OPE31BQ8S+SRLWPYzY3T9JEtY9gUPEvkOPU71Jrjs/ynH//8di7L/AQME9wAAAA4AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQwIJ
        C/Qdi7L/FGB7/iGey/8jrNz/GXia/xZqiP8ZeZv/JKzd/yGey/8UYHv+HYuy/wIJC/QAAABEAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAQwEDBPcBCQqrAgsO5gYcJfMkrN3/Kcf//ySs3f8GHCTzAgsO5gEJCqsBAwT3AAAARAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAADgAAAAAAAAABAwsOsw0+T/8TXXf/DT5P/wMLDrMAAAABAAAAAAAA
        AA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2AAAAdwAAAHcAAAB3AAAANgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//gAAf+AAADAAAAAgAAAAJ+AAACeMAAAgDAAAIAwAADmMAAAh/AAAP/w
        AACH8AAA//AAAIYAAAD0AAAA4AAAAMAAAACAAAAAwAAAAIAAAAAAAAAAAEAAAADgAAAAQAAAAAAAAIAA
        AAHAAH//gAA//8AAf//gAP//9AX///4P//8=
</value>
  </data>
</root>