<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        af/GrlX/EhQM+R81K/U+a1f+UItx/3zYsP9/3bT/P25a/33asf8ECAb4AAAAEQAAAEYbLiXwP25a/z9u
        Wv9/3bT/DxkU+F5VK/pyZDH/GxcM/1VLJf9yZDH/e2w1/6iUSP/w02f/9NZp//TWaf/01mn/9NZp//TW
        af/01mn/685l/xMUDPlSjnT/f920/3/dtP9/3bT/f920/3/dtP9/3bT/f920/xotJPAAAABEAAAAZzFV
        RfZ/3bT/f920/3/dtP9uwJz/RXhi/0R2YP9EdmD/RHZg/0R2YP8+a1f8Gywi9SUmFvbixmH/9NZp//TW
        af/01mn/9NZp//TWaf+hjUX/HzQq9H/dtP9/3bT/f920/3/dtP9/3bT/f920/3/dtP9/3bT/MFND9AAA
        AGUAAAB3O2hU+3/dtP9/3bT/f920/3/dtP9/3bT/f920/z9uWv9/3bT/f920/3/dtP9+3LP/NVtJ+jQw
        GvlyZDH/cmQx/3JkMf9yZDH/cmQx/z02Gv84Yk/7f920/3/dtP9/3bT/f920/3/dtP9/3bT/f920/3/d
        tP86ZVL7AAAAdwAAAHc6ZlL7f920/3/dtP8AAAD/f920/3/dtP9/3bT/P25a/3/dtP9/3bT/f920/3/d
        tP9yxqL/AgIB/oJyOP+Ccjj/gnI4/4JyOP+Ccjj/XlIo/yA2K/V/3bT/f920/3/dtP9/3bT/f920/3/d
        tP9/3bT/f920/zljUfwAAAB3AAAAZzBTRPVfpof/X6aH/3/dtP9/3bT/f920/1+mh/9fpof/f920/3/d
        tP9/3bT/f920/3LGov8OEQv59NZp//TWaf/01mn/9NZp//TWaf/pzWT/ERMM+VGOc/5/3bT/f920/3/d
        tP9/3bT/f920/3/dtP9/3bT/K0s+9wAAAGUAAABHGy4l8F+mh/9fpof/f920/3/dtP9/3bT/X6aH/1+m
        h/9/3bT/f920/3/dtP9/3bT/NFpK+FhSLPb01mn/9NZp//TWaf/01mn/9NZp//TWaf/ErFT/ERMM+SA1
        K/Q5ZFH9O2dU/ztnVP87Z1T/O2dU/ztnVP8NGBT3AAAARQAAABQEBwb5O2dU/ztnVP87Z1T/O2dU/ztn
        VP87Z1T/O2dU/ztnVP87Z1T/OWNR/BwuJPQoKRj25cli//TWaf/01mn/9NZp//TWaf/01mn/9NZp//TW
        af+PfT3/PTYa/4JyOP+Ccjj/gnI4/4JyOP+Ccjj/fm82/wIBAf4AAAASAAAAABAOB91YTSb/gnI4/4Jy
        OP+Ccjj/gnI4/4JyOP9aTyf/Ih4P/4JyOP+FdTn/rJdK//HTaP/01mn/9NZp//TWaf/01mn/9NZp//TW
        af/01mn/9NZp/09GIv+biEP/9NZp//TWaf/01mn/9NZp//TWaf+znU3/EA8H2wAAAAAAAAAABgYCelNJ
        JPj01mn/9NZp//TWaf/01mn/9NZp/+XJYv8ODQb/48di//TWaf/01mn/9NZp//TWaf/01mn/9NZp//TW
        af+wm0z+EBIL+REUDPifjEX+Dw0H/+PHYv++p1L/fW42/3JkMf9yZDH/cmQx/zQuFvoGBAJ4AAAAAAAA
        AAAAAAAWCQgE9nJkMf9yZDH/cmQx/3JkMf9yZDH/cmQx/xoXC/9NQyH/cmQx/3JkMf9yZDH/cmQx/3Jk
        Mf9yZDH/cmQx/w8QCvlbn4H/YaiJ/wEBAP8bFwz/WlAo/BEaFPY9alb7RHZg/0R2YP83X07/AwUE+QAA
        ABQAAAAAAAAAAAAAAAALCwWQGxcM/IJyOP+Ccjj/gnI4/4JyOP+Ccjj/ems0/wQDAv9vYTD/gnI4/4Jy
        OP+Ccjj/gnI4/4JyOP9hVSr/CxAM+X/dtP9/3bT/AAAA/3prNf8CAwL+bb6b/3/dtP9/3bT/f920/ylJ
        O/YECQeMAAAAAAAAAAAAAAAAAAAAAAAAAAwMCgXpq5ZK//TWaf/01mn/9NZp//TWaf/01mn/bF8v/0pB
        IP/z1Wn/9NZp//TWaf/01mn/5cli/x0fE/ZLg2v7f920/3/dtP8AAAD/9NZp/wAAAP9/3bT/f920/3/d
        tP9Ym33+BwsJ5wAAAAsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4ODAb1zbRY//TWaf/01mn/9NZp//TW
        af/pzWT/LCcT/4R0Of/01mn/9NZp//TWaf+TgT//K0o79n/dtP9/3bT/f920/xAbFfhPRyX6ERoV93/d
        tP8AAAD/a7qY/wYKCPYAAAA7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUFA18VEwn1zrRZ//TW
        af/01mn/9NZp//TWaf/Vu1z/GhcL/4p5O//01mn/9NZp/3prNP8/blr/X6aH/1+mh/9/3bT/br+b/0V4
        Yv9uv5v/f920/2q4lv8JEAz1AwUFXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUF
        A18ODAb1r5pL//TWaf/01mn/9NZp//TWaf/TuVv/IR0O/2dbLP/u0Wf/ems0/z9uWv9fpof/X6aH/3/d
        tP9/3bT/f920/3/dtP9Zmn7/Bw0K9AMDA1wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAD4LCgToTkUi93JkMf9yZDH/cmQx/3JkMf9iVir/AwMB/yYiEP8aFwv0HTMq/ztn
        VP87Z1T/O2dU/ztnVP87Z1T/KEU59wUKCOgAAAA9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAABuAAAAdwAAAHcAAAB3AAAAdwAAAHcAAAB3AAAAdwAA
        AHcAAAB3AAAAdwAAAHcAAAB3AAAAdwAAAHcAAABuAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////+AAB//AAAP/gAAB/wAAAP4AAAB8AAAAPAAAADgAAAAYAA
        AAGAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAAYAAAAHAAAADwAAAA+AA
        AAfwAAAP+AAAH/wAAD/+AAB///////////8=
</value>
  </data>
</root>