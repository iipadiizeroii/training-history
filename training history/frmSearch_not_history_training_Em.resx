<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAOwAAADsAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
        AD4AAABxAAAAcQAAAD4AAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ACMOFRHfEyAg/C9YZP8vWGT/EyAg/A4VEd4AAAAiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAUCAkE6xAbHP9qy+7/cNf8/3DX/P9qy+7/Dxob/wgJBOsAAAATAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAkKBZZFUiP5S1wt/xAZF/8yXWj/Mlxn/xAYFv9LXC3/Q1Aj+AkKBZMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAACQsE65OwTP+oyVf/FRkQ/0BKUP9ASU//FRkQ/6jJV/+Tr0v/CQsE6gAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkBAQH9rc5Z/22COP9BS1H/tNDw/7TQ8P9ASlD/boM4/63O
        Wf8BAgH9AAAAGQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABxAAAA6QMEAveZt0//a4A3/0FLUf+00PD/tNDw/0BK
        UP9sgTj/mLVO/wQEAvYAAADpAAAAbwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHAAAApgAAAMUAAAAkCQoFlUVSI/moyVb/GR0T/0FL
        Uf9BS1H/GR0T/6jJV/9DUCL5CQoFkwAAACQAAADGAAAApAAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAKYAAACtAAAACAAAAAAAAAATCgwG5WF0
        Mv2mx1b/a4A3/2uAN/+oyVb/Z3s1/QoMBuUAAAATAAAAAAAAAAgAAACuAAAApAAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABxAAAAxQAAAAgAAABEAAAAiAAA
        AIgAAAClAAAA/xgeDfJOXSj6Tlwo+hkeDfIAAAD/AAAApQAAAIgAAACIAAAARAAAAAgAAADGAAAAcAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGgAAAOkAAAAkAAAAAAAA
        AIA/Pj3/fnx7/358e/9+fHv/fnx7/358e/9+fHv/fnx7/358e/9+fHv/fnx7/z8+Pf8AAACAAAAAAAAA
        ACQAAADpAAAAGQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUEhIHmxAPBfICAgH+BgYC+RER
        B5kAAAASAAAAgHZ0c//t6eb/7enm/+3p5v/t6eb/7enm/+3p5v/t6eb/7enm/+3p5v/t6eb/dnRz/wAA
        AIAAAAATDA8PmgQFBvkBAQL+Cw0P8Q0PEZoAAAATAAAAAAAAAAAAAAAAAAAAIw0MBPBPQRb/s48w/9Go
        Of+zjzD/T0EW/xAQB+sAAACcdnRz/+3p5v/t6eb/7enm/+3p5v/t6eb/7enm/+3p5v/t6eb/7enm/+3p
        5v92dHP/AAAAnAwODusqMln/WmvR/2p99f9aa9H/KjJa/wkLC/AAAAAiAAAAAAAAAAELDAXWJCoS/jEq
        D/+vjS//1Ko5/6+NL/8xKg//JCkR/gAAAP92dHP/7enm/+3p5v/t6eb/7enm/+3p5v/t6eb/7enm/+3p
        5v/t6eb/7enm/3Z0c/8AAAD/IikV/hwiNP9Yac3/a374/1hpzf8cIjT/IikU/goMBdUAAAABAAAAPxcb
        DPOw01v/VWUr/wAAAP8AAAD/AAAA/1VlK/+w01v/FhoM83Z0c//t6eb/7enm/+3p5v/t6eb/7enm/+3p
        5v/t6eb/7enm/+3p5v/t6eb/dnRz/xcbDPOw01v/VGUu/wAAAP8AAAD/AAAA/1RlLf+w01v/FhoM8wAA
        AD0AAABzSFYl+rPWXP8xOiH/Xmx8/6zG5f9dbHv/Mzwi/7PWXP9IVSX5dnRz/+3p5v/t6eb/7enm/+3p
        5v/t6eb/7enm/+3p5v/t6eb/7enm/+3p5v92dHP/SFYl+rPWXP8xOiH/Xmx8/6zG5f9dbHv/Mzwi/7PW
        XP9IVSX5AAAAcgAAAHNOXSj5s9Zc/wkLCP+sxuX/tNDw/6vF5P8KDAn/s9Zc/01cKPl2dHP/7enm/+3p
        5v/t6eb/7enm/+3p5v/t6eb/7enm/+3p5v/t6eb/7enm/3Z0c/9OXSj5s9Zc/wkLCP+sxuX/tNDw/6vF
        5P8KDAn/s9Zc/01cKPkAAAByAAAAPxkeDfKy1Fv/Lzgg/19tff+sx+b/Xmx8/zA6IP+y1Fv/GBwN8jc2
        Nf9vbWv/b21r/29ta/9vbWv/b21r/29ta/9vbWv/b21r/29ta/9vbWv/NzY1/xkeDfKy1Fv/Lzgg/19t
        ff+sx+b/Xmx8/zA6IP+y1Fv/GBwN8gAAAD4AAAACCQwF12F0Mv2dvFH/Lzgg/wgJB/8wOSD/nr1R/2Bz
        Mf0AAAD/HSNE/ztFiP87RYj/O0WI/ztFiP87RYj/O0WI/ztFiP87RYj/O0WI/ztFiP8dI0T/AAAA/2F0
        Mv2dvFH/Lzgg/wgJB/8wOSD/nr1R/2BzMf0KDAXWAAAAAQAAAAAAAAAjCAkE60VSI/mZt0//r9Ja/5i2
        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
        AP//wAP//+AH///gB///4Af///AP///4H/8=
</value>
  </data>
</root>