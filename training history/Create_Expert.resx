<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="OP1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAOwAAADsAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAQJBvAHDQu1AAAAZgAAACsAAAAaAAAAVQkR
        DqYHCwnrAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAM1hI/06Hbv8qSTzzCBAM9QgQ
        DPUqSTzzTodu/zNYSP8AAACAAAAAAAAAAAAAAACAAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8/blr/f920/3/d
        tP9/3bT/f920/3/dtP9/3bT/P25a/wAAAIAAAAAAAAAAAAAAAIA3QX//boL//26C//83QX//N0F//26C
        //9ugv//boL//zdBf/83QX//boL//26C//9ugv//boL//26C//83QX//N0F//26C//9ugv//N0F//z9u
        Wv9/3bT/f920/3/dtP9/3bT/f920/3/dtP8/blr/AAAAgAAAAAAAAAAAAAAAgDdBf/9ugv//boL//zdB
        f/83QX//boL//26C//9ugv//N0F//zdBf/83QX//N0F//26C//9ugv//boL//zdBf/83QX//boL//26C
        //83QX//OmVT/0d8ZfoXKSPzBwwL+gcMC/oYKiTzSH1m+zplU/8AAACAAAAAAAAAAAAAAACAN0F//26C
        //9ugv//N0F//zdBf/9ugv//boL//26C//83QX//N0F//26C//9ugv//boL//26C//9ugv//N0F//zdB
        f/9ugv//boL//zU/fP8BAQH/J0lU91WkwP9rzfD/a83w/1Wjv/8nSVP3AQEB/wAAAIMAAAAAAAAAAAAA
        AIA3QX//boL//26C//83QX//N0F//26C//9ugv//boL//zdBf/83QX//N0F//zdBf/9ugv//boL//26C
        //83QX//N0F//26C//9eb9r/CA0S+U6Vr/9XqMX/Iz5I/wcLDf8HCw3/Iz9J/1ipx/9NlK7/BQoM8QAA
        ACQAAAAAAAAAgDdBf/9ugv//boL//zdBf/83QX//boL//26C//9ugv//PEeL/xkeOvdpfPT/boL//26C
        //9ugv//boL//zdBf/83QX//boL//xsjPfU/e5D9TJGq/wwTFf9ki5j/lM/i/5TP4v9ki5j/DBMV/0yT
        rP8+eY39CA4RxQAAAAAAAAB6ND54/G6C//9ugv//N0F//zdBf/9ugv//boL//26C//9neu//BwgN/Bwf
        M/ZpfPT/boL//26C//9ugv//N0F//zdBf/9eb9n/ChEX+GfG5/8KERP/grfH/z9XY/8bJCz/GyQs/z9X
        Y/+BtcX/ChEU/2fH6P8HDxL1AAAAJAAAAFohJ0zyboL//26C//83QX//N0F//26C//9ugv//boH+/yIm
        QvZbWVj3W1lY9yImQvZugf7/boL//26C//9UY8P/VGPD/0NPm/8pTlz1SImh/y9ES/+n6v//Exoh/y42
        af8uNmn/Exoh/6fq//8uQ0r/SIqi/yhLWPQAAABjAAAAFwQFCvZld+n/boL//26C//9ugv//boL//26C
        //9BTJb+AwMD/mhnZvhoZmX5AwMD/kFMlv5ugv//boL//26C//9ugv//OkWH/zRldvs7cYT/S2lz/2eQ
        nf8RFiP/Xm/a/15v2v8RFSL/Z5Cd/0ppcv87cYT/NWR1/AAAAHkAAAAABQcOkRsgQPRrfvj/boL//26C
        //9ugv//an31/wwMEfmgmpb/ExIS+RMSEvmgmpb/DA0R+Wp99v9ugv//boL//26C//9FUZ//KExZ80eJ
        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
        IADwACAA8AAgAPAAIAD8AGAA/gDgAP+D4AA=
</value>
  </data>
</root>