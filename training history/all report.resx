<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        qP8QFhj/lZOS/+3p5v/t6eb/dnRz/wAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgHZ0
        c/+yr6z/sq+s/7KvrP+yr6z/sq+s/7KvrP/t6eb/7enm/+3p5v+1srD/KSov/xQWIf8wN2L/AAAA/zFU
        Yf8UHSD/Ki8w/7e0sv/t6eb/7enm/+3p5v92dHP/AAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAACAdnRz/7KvrP+yr6z/sq+s/7KvrP+yr6z/sq+s/+3p5v/t6eb/7enm/+3p5v/t6eb/wr+9/46M
        iv9+fHv/joyK/8PAvf/t6eb/7enm/+3p5v/t6eb/7enm/3Z0c/8AAACAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAEgAAALc3NjX/b21r/29ta/9vbWv/b21r/29ta/9vbWv/b21r/29ta/9vbWv/b21r/29t
        a/9vbWv/b21r/29ta/9vbWv/b21r/29ta/9vbWv/b21r/29ta/9vbWv/NzY1/wAAALcAAAASAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAB5Hig0+j9Ubv8/VG7/P1Ru/z9Ubv8/VG7/P1Ru/z9Ubv8/VG7/P1Ru/z9U
        bv8/VG7/P1Ru/z9Ubv8/VG7/P1Ru/z9Ubv8/VG7/P1Ru/z9Ubv8/VG7/P1Ru/z9Ubv8/VG7/Hig0+gAA
        AHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHkZIy37N0ph/zdKYf83SmH/N0ph/zdKYf83SmH/N0ph/zdK
        Yf83SmH/N0ph/zdKYf83SmH/N0ph/zdKYf83SmH/N0ph/zdKYf83SmH/N0ph/zdKYf83SmH/N0ph/zdK
        Yf8ZIy37AAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEwAAAHQAAAB3AAAAdwAAAHcAAAB3AAAAdwAA
        AHcAAAB3AAAAdwAAAHcAAAB3AAAAdwAAAHcAAAB3AAAAdwAAAHcAAAB3AAAAdwAAAHcAAAB3AAAAdwAA
        AHcAAAB3AAAAdwAAAHQAAAASAA///wAP//8AD///AA///wAP//8AD///AA///wAH//8AA///gAAAAMAA
        AADgAAAA4AAAAOAAAAHgAAAB4AAAAeAAAAHwAAAB+AAAAfwAAAH8AAAB/AAAAfwAAAH8AAAB/AAAAfwA
        AAH8AAAB/AAAAfgAAAD4AAAA+AAAAPgAAAA=
</value>
  </data>
</root>